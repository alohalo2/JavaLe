Java 용어 정리 및 쓰임새

*은 클래스 개념으로 생각

  variable (변수)
  operator (연산자)
  controlstatement
  array (배열)
  method (메소드)
* class (클래스)
  static
  inherit (상속)
  polymorphim
  abstaction (추상화)
* interface (인터페이스)
  nestedclass
  objectarray (object 배열)
  exception (예외처리)
  collection (클래스 중에 하나)
  generic (제네릭)
* enum (이넘) - 상수 선언 모음집
  thread (스레드)




  lambda (람다식) - 함수형 프로그래밍 스타일을 java에서 사용하기 위한 형식


	<람다식 사용시 주의사항 및 함수형 인터페이스>

	- 람다식은 주로 함수형 인터페이스와 함께 사용됩니다. 
	- 함수형 인터페이스는 하나의 추상 메서드만을 가지는 인터페이스입니다. 
	- 함수형 추상메서드
	- Java 8에서 제공하는 대표적인 함수형 인터페이스로는 Predicate, Function, Consumer, Supplier 등이 있습니다.

 	람다식으로 추상메소드의 구현체를 전달하는데
	추상메소드의 형태와 동일해야 한다. (int 값을 리턴)
	리턴 타입 및 매개변수의 개수


	<람다식의 장점>

	1. 코드 간결성: 익명 클래스나 내부 클래스를 작성할 필요 없이 짧고 간결하게 코드 작성이 가능합니다.

	2. 가독성 향상: 코드의 의도가 명확하게 드러나며, 읽기 쉽고 유지보수가 용이합니다.

	3. 지연 연산 지원: 스트림 API와 함께 사용되면, 지연 연산(lazy evaluation)을 통해 성능을 최적화할 수 있습니다.




  stream (스트림) - 새로운 배열처럼 생각 


	<스트림 사용 시 주의 사항>

	- 메소드 중에 중간처리 단계와 최종처리(forEach, reduce, sum) 단계가 나누어져 있어 사용 시 주의 필요
	- 파이프라인은 스트림으로 여러가지 메소드를 한번에 사용할 수 있는 형식이다.
	  파이프라인으로 구성되면 최종 단계 메소드의 리턴값이 리턴되기 때문에 최종단계 메소드로 값을 받아줘야 한다.
	 

	<Stream을 사용하는 주요 이유>

	1. 간결한 코드: Stream API는 함수형 프로그래밍 스타일을 채택하여 복잡한 데이터 처리를 간결하고 읽기 쉽게 만듭니다. 
	반복문과 조건문을 사용하지 않고도 다양한 연산을 수행할 수 있습니다.

	2. 가독성 향상: 스트림을 사용하면 코드의 가독성이 높아져, 코드를 읽는 사람이 데이터 처리의 흐름을 더 쉽게 이해할 수 있습니다.

	3. 간편한 데이터 변환 및 필터링: 스트림을 사용하면 데이터를 필터링, 매핑, 정렬 등 다양한 연산을 쉽게 수행할 수 있습니다.

	4. 병렬 처리 지원: Stream API는 간단하게 병렬 처리를 지원하여 성능을 향상시킬 수 있습니다. 
	parallelStream() 메서드를 사용하면 병렬 스트림을 쉽게 생성할 수 있습니다.
